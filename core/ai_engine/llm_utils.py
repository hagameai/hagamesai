import logging
from typing import Any, Dict

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def preprocess_llm_input(user_input: str) -> Dict[str, Any]:
    """
    Preprocess the user input for LLM.
    
    Args:
        user_input (str): The raw input from the user.
    
    Returns:
        Dict[str, Any]: A dictionary containing the processed input.
    """
    try:
        processed_input = user_input.strip().lower()
        logger.info("Input processed successfully.")
        return {'input': processed_input}
    except Exception as e:
        logger.error(f"Error processing input: {e}")
        raise


def format_llm_response(response: Any) -> str:
    """
    Format the response from LLM for user display.
    
    Args:
        response (Any): The raw response from LLM.
    
    Returns:
        str: A formatted string for display.
    """
    try:
        formatted_response = str(response)
        logger.info("Response formatted successfully.")
        return formatted_response
    except Exception as e:
        logger.error(f"Error formatting response: {e}")
        raise


def log_llm_interaction(user_input: str, response: Any) -> None:
    """
    Log the interaction between user input and LLM response.
    
    Args:
        user_input (str): The input provided by the user.
        response (Any): The response generated by LLM.
    """
    logger.info(f"User Input: {user_input}")
    logger.info(f"LLM Response: {response}")
